#!/usr/bin/python

import sys
import os
import socket

sys.path.insert(1, '../Fish/Common')

from threading import Thread

from Fish.Remote.client_player import ClientPlayer

LOCALHOST = "127.0.0.1"
TIMEOUT = 600 # set a 10 min timeout so we don't run forever
USAGE = "Usage: ./xclients n p (optional ip)"

def exit_main(msg):
    """Exit the progran with the given message"""
    print(msg)
    os._exit(0)


def verify_numeric(val):
    """Verify that the given value is a number, otherwise
    exit the program."""
    try:
        return int(val)
    except ValueError:
        exit_main(USAGE)

def parse_cli():
    """Parse the command line arguents, and return the number
    of clients, the port, and the optional IP. Exit the program
    if there is any error in parsing the arguments."""

    if len(sys.argv) < 3 or len(sys.argv) > 4:
        exit_main(USAGE)

    n = verify_numeric(sys.argv[1])
    p = verify_numeric(sys.argv[2])

    if n < 0 or p < 0:
        exit_main(USAGE)

    if len(sys.argv) == 3:
        return (n, p, LOCALHOST)
    else:
        return (n, p, sys.argv[3])

def thread_func(ip, port, name):
    """Function to run an individual client. Runs the client
    by connecting to the given IP and port and gives the client a
    name."""
    client = None
    try:
        client = ClientPlayer(ip, port, name, depth=1, timeout=None)
        client.start()
    except Exception as e:
        print("Problem running xclients for user {}: {}".format(name, e))
        if client is not None:
            client.sock.close()
    except KeyboardInterrupt:
        print("Keyboard interrupt caught.")

def main():
    n, p, ip = parse_cli()
    threads = []
    for i in range(n):
        # str(unichr()) gives an ASCII char given an integer. Used to generate unique
        # names
        threads.append(Thread(target=thread_func, args=[ip, p, "player{}".format(i)]))
        threads[i].daemon = True
        threads[i].start()
    for i in range(n):
        threads[i].join(TIMEOUT)

if __name__ == "__main__":
    main()
